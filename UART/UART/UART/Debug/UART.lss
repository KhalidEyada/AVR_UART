
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000740  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062e  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00000f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  000015d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001641  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "util/delay.h"

int main(void)
{
    /* Replace with your application code */
	UART_voidInit();
  6c:	0e 94 3f 00 	call	0x7e	; 0x7e <UART_voidInit>
	
    while (1) 
    {
		u8 data=UART_voidGetChar();
  70:	0e 94 4b 00 	call	0x96	; 0x96 <UART_voidGetChar>
		if (data!='\0')
  74:	88 23       	and	r24, r24
  76:	e1 f3       	breq	.-8      	; 0x70 <main+0x4>
		{
			UART_voidSendChar(data);
  78:	0e 94 47 00 	call	0x8e	; 0x8e <UART_voidSendChar>
  7c:	f9 cf       	rjmp	.-14     	; 0x70 <main+0x4>

0000007e <UART_voidInit>:
{
	/* PUT SOME CODE HERE */	
  // Set BaudRate -> 9600 or whatever
  // Set Frame Format -> 8 data, 1 stop, No Parity or what ever
  // Enable Sending and Recieving by Enabling RXE and TXE bits in USCRB register
   UCSRC=CONFIG_UCSRC;
  7e:	86 e8       	ldi	r24, 0x86	; 134
  80:	80 bd       	out	0x20, r24	; 32
   UCSRB=CONFIG_UCSRB;
  82:	8c ef       	ldi	r24, 0xFC	; 252
  84:	8a b9       	out	0x0a, r24	; 10
   UBRRL=BAUD_RATE;
  86:	87 e6       	ldi	r24, 0x67	; 103
  88:	89 b9       	out	0x09, r24	; 9
   UBRRH = (BAUD_RATE >> 8);	
  8a:	10 bc       	out	0x20, r1	; 32
  8c:	08 95       	ret

0000008e <UART_voidSendChar>:
{
  /* PUT SOME CODE HERE */
  
    // wait for the trasmitting flag (UDRE bit in UCSRA register)
	//send data
	while (! (UCSRA & (1<<u8_PIN5)));  /* Wait for empty transmit buffer */
  8e:	5d 9b       	sbis	0x0b, 5	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <UART_voidSendChar>
		UDR_T=data;
  92:	8c b9       	out	0x0c, r24	; 12
  94:	08 95       	ret

00000096 <UART_voidGetChar>:
  /* PUT SOME CODE HERE */
  u8 data='\0';
  
  // wait for the receiving flag (RXC bit in UCSRA register)
  //read data
  while ((UCSRA & (1 << u8_PIN7)) == 0);/* Wait till data is received */
  96:	5f 9b       	sbis	0x0b, 7	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <UART_voidGetChar>
  data = UDR_R;		
  9a:	8c b1       	in	r24, 0x0c	; 12

  return data;		/* Return the byte */
  
}
  9c:	08 95       	ret

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
